{
	"classtraitcomposition" : "PythonSubscriptionIndex classTrait",
	"classvars" : [ ],
	"instvars" : [
		"#assert => FMOne type: #PythonAssert opposite: #conditional",
		"#assign => FMOne type: #PythonAssign opposite: #expr",
		"#attributeNav => FMOne type: #PythonAttributeNav opposite: #left",
		"#await => FMOne type: #PythonAwait opposite: #expression",
		"#binOp => FMOne type: #PythonBinOp opposite: #left",
		"#call => FMOne type: #PythonCall opposite: #left",
		"#comprehensionExpression => FMOne type: #PythonComprehensionExpression opposite: #elt",
		"#expressionStatement => FMOne type: #PythonExpressionStatement opposite: #expr",
		"#formattedValue => FMOne type: #PythonFormattedValue opposite: #expression",
		"#functionDeclaration => FMOne type: #PythonFunctionDeclaration opposite: #decorateurs",
		"#ifExpression => FMOne type: #PythonIfExpression opposite: #else",
		"#ifOwner => FMOne type: #PythonIf opposite: #cond",
		"#itemDict => FMOne type: #PythonItemDict opposite: #key",
		"#lambda => FMOne type: #PythonLambda opposite: #body",
		"#list => FMOne type: #PythonList opposite: #contents",
		"#parentComprehensionIterable => FMOne type: #PythonComprehension opposite: #iterable",
		"#parentForIterable => FMOne type: #PythonFor opposite: #iterable",
		"#parentIfs => FMOne type: #PythonComprehension opposite: #ifs",
		"#parentTarget => FMOne type: #PythonComprehension opposite: #target",
		"#return => FMOne type: #PythonReturn opposite: #returnValue",
		"#sFunction => FMOne type: #PythonSFunction opposite: #decorateurs",
		"#set => FMOne type: #PythonSet opposite: #contents",
		"#slice => FMOne type: #PythonSlice opposite: #lower",
		"#starred => FMOne type: #PythonStarred opposite: #expr",
		"#subscript => FMOne type: #PythonSubscript opposite: #value",
		"#tuple => FMOne type: #PythonTuple opposite: #contents",
		"#unOp => FMOne type: #PythonUnOp opposite: #expr",
		"#while => FMOne type: #PythonWhile opposite: #cond",
		"#withItem => FMOne type: #PythonWithItem opposite: #contextExpression",
		"#yield => FMOne type: #PythonYield opposite: #expression",
		"#yieldFrom => FMOne type: #PythonYieldFrom opposite: #expression"
	],
	"name" : "PythonExpression",
	"commentStamp" : "",
	"super" : "PythonEntity",
	"traitcomposition" : "PythonSubscriptionIndex",
	"type" : "normal",
	"classinstvars" : [ ],
	"pools" : [ ],
	"category" : "Fmpython-Entities"
}